NOUSERMACRO(xd)

includefile(../../release.yo)

htmlbodyopt(text)(#27408B)
htmlbodyopt(bgcolor)(#FFFAF0)
whenhtml(mailto(Frank B. Brokken: f.b.brokken@rug.nl))

DEFINEMACRO(lsoption)(3)(\
    bf(--ARG1)=tt(ARG3) (bf(-ARG2))\
)
DEFINEMACRO(laoption)(2)(\
    bf(--ARG1)=tt(ARG2)\
)
DEFINEMACRO(loption)(1)(\
    bf(--ARG1)\
)
DEFINEMACRO(soption)(1)(\
    bf(-ARG1)\
)


DELETEMACRO(tt)
DEFINEMACRO(tt)(1)(em(ARG1))

COMMENT( man-request, section, date, distribution file, general name)
manpage(xd)(1)(_CurYrs_)(xd._CurVers_.tar.gz)
        (xd - fast directory changes)

COMMENT( man-request, larger title )
manpagename(xd)(eXtra fast Directory changer)

COMMENT( all other: add after () )
manpagesynopsis()
       bf(xd) [OPTIONS] tt(arguments)

manpagedescription()

    The program bf(xd) is used to perform fast directory changes. Usually to
change a directory the user is required to enter a command like, e.g.,
tt(chdir /usr/local/bin), possibly with the aid of shell completion. In many
cases this is a tedious task: shell completion shows all entries, including
files, when we're only interested in directories and the full specification of
our intented directory may eventually require many keyboard actions. 

    bf(Xd) was designed a long time ago (in the early 90s) to reduce the
effort of changing a directory. Often we're well aware to which directory we
want to change, and it's easy to produce the initial directory characters of
that directory. E.g., if the intent is to tt(chdir) to tt(/usr/local/bin),
it's rather easy to produce the letters tt(ulb). 

    bf(Xd) capitalizes on this capability. By providing the initial directory
characters of directories bf(xd) will determine the proper expansion allowing
you to change directories fast. So, entering the command tt(xd ulb) will
result in the expansion tt(/usr/local/bin).

    Often life is not that easy. Often there are multiple expansions from a
given set of initial characters. E.g., when entering tt(xd ulb) bf(xd) may
find several alternatives. E.g.,
        verb(
 0: /usr/lib/base-config
 1: /usr/lib/bonobo
 2: /usr/lib/bonobo-activation
 3: /usr/local/bin
        )
    If these are the alternatives, this is exactly what bf(xd) will show
you. Then, by simply pressing the tt(3) key (em(no) tt(Enter) key required)
bf(xd) will produce the required tt(/usr/local/bin). 

    Commands to bf(xd) can be specified so as to fine-tune bf(xd)'s behavior:
    itemization(
    it() By default (as specified by the configuration file, see below)
expansions may start at the user's home directory or at the system's root
directory.
    it() Initial character bf(/): If the first character of the command is
tt(/) all expansions will be performed from the system's root directory. E.g.,
tt(xd /t) will result in tt(/tmp) but not in tt(/home/user/tmp).
    it() Initial character bf(.): If the first character of the command is
tt(.) all expansions will be performed from the user's home directory. E.g.,
tt(xd .t) will result in tt(/home/user/tmp) but not in tt(/tmp)
    it() Initial character bf(0): If the first character of the command is
tt(0), all expansions will start at the current working directory. In fact,
this is a specialization of the following, more general form:
    it() Initial character bf(1..9): If the first character of the command is
a digit between tt(1) and tt(9) all expansions will start at that parent
directory level of the current working directory (up to the system's root
directory). E.g., if the current working directory is tt(/usr/share/doc) then
tt(xd 2lb) will offer the alterative tt(/usr/local/bin): two steps up, then
look for directories starting with tt(l) and therein directories starting with
tt(b).
    it() Separators (space (tt(' '))), tt(/) and tt(-): sometimes it is clear
that there are many alternatives and the intention is to reduce that
number. By using a separator subsequently nested directories must start with
the characters between the separators. E.g., tt(xd u l bi) will not produce
the alternative tt(/usr/lib/base-config) anymore, since tt(base-config) does
not start with tt(bi). In this case only tt(/usr/local/bin) is
produced. Separators may be mixed (tt(xd u/l bi) is identical to tt(xd u l
bi)). Since the tt(/) can also be used as a root-directory specification, a
conflict is implied by a command like tt(xd /u l bi). This conflict is solved
by given the initial character a higher precedence than the separator. Using
the tt(-) separator in this case is another way to solve the conflict (which
in practice hardly ever occurs). 
    )

    If there's only one solution, bf(Xd) will write that directory to its
standard output stream. If there are multiple solutions, a list of at most 62
alternatives (10 for the numbers 0..9, 26 for the letters a..z and 26 for the
letters A..Z) will be written to the standard error stream from which the user
may select an alternative by simply pressing the key associated with the
selection of choice. If no selection is requested any other key may be pressed
(e.g., the space bar or the tt(Enter) key). If there is no solutioon bf(xd)
will write the text tt(No Solutions) to the standard error stream.

    When tt(xd) is given at least one argument, all its output is sent to the
standard error stream, but for the selected directory name which is written to
the standard output stream. If no selection is made or if the selection
process is aborted a single dot is written to the standard output
stream. Usually tt(xd) will be called by a shell alias, providing the
tt(chdir) command with bf(xd)'s output (see below at the bf(SHELL SCRIPTS)
section) executing tt(chdir `xd $*`). The default dot produced by bf(xd) will
then prevent a unintended change of directory.

    If bf(xd) is called without arguments then em(usage) information is
written to the standard error stream.

    bf(Xd) may be further configured using options and a configuration file,
discussed in the nxt two sections.

manpagesection(RETURN VALUE)

    bf(Xd) returns 0 to the operating system unless an error occurs (e.g.,
when a non-existing configuration file is specified), or bf(xd)'s version or
usage info is shown or requested.

manpageoptions()
    If available, single letter options are listed between parentheses
following their associated long-option variants. Single letter options require
arguments if their associated long options require arguments as well.
    itemization(
    it() loption(debug)nl() 
            showing the actual parsing process on the standard output
            stream. When included, the debugging output is active by default,

    it() lsoption(filenames)(f)(filename)nl()
            Specific options overriding particular filenames are also
            available (which then, in turn, overide the name specified by this
            option).
    it() loption(help) (soption(h))nl()
            Write basic usage information to the standard output stream and
            terminate. 
    it() loption(verbose) (soption(V))nl() 
           Write a file containing verbose descriptions of
            the xxxxr states and what is done for each type of look-ahead
            token in that state.  This file also describes all conflicts
            detected in the grammar, both those resolved by operator
            precedence and those that remain unresolved.  By default it will
            not be created, but if requested it will receive the filename
    it() loption(version) (soption(v))nl()
            Display bf(xd)'s version number and terminate.
    )
    

manpagesection(CONFGURATION FILE)

    The following directives can be used in the initial section of the
grammar specification file. When command-line options for directives exist,
they overrule the corresponding directives given in the grammar
specification file.
    itemization(
    it() bf(%baseclass-header) tt(header) nl()
           Defines the pathname of the file containing the xxxxr's base
            class. This directive is overridden by the
            bf(--baseclass-header) or bf(-b) command-line options.
    )
                    
manpagesection(SHELL SCRIPTS)

manpagesection(EXAMPLE)

    Using a fairly worn-out example, we'll construct a simple calculator
below. The basic operators as well as parentheses can be used to specify
expressions, and each expression should be terminated by a newline. The
program terminates when a tt(q) is entered. Empty lines result in a mere
prompt. 

        
manpagefiles()
    itemization(
    it() bf($HOME/.xdrc): Default location of the configuration file
    it() tt(https://oosix.icce.rug.nl/svnroot/xd): Svn repository
    )

manpagebugs()

    None reported

manpagesection(ABOUT xd)

    The program bf(xd) was initially (before 1994) written for the MS-DOS
platform. In 1994 it was designed to work under Unix (Linux, AIX) and it was
converted to bf(C++). The original bf(C++) code is still available
(tt(https://oosix.icce.rug.nl/svnroot/xd/tags/start/xd/)) and is funny to look
at as it is a remarkable illustration of bf(C++) code written by bf(C)
programmers who had just learned about bf(C++). Versions tt(2.x) have been
used until 2008, and in late August 2008 I rewrote bf(xd) completely,
reflecting my current views about bf(C++), resulting in versions tt(3.x.y) and
beyond. The tt(3.x.y) and later versions extensively use the facilities
offered by the bf(bobcat)(7) library.
    
manpageauthor()

Frank B. Brokken (f.b.brokken@rug.nl).
