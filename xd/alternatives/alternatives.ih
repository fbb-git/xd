#include "alternatives.h"

#include <unistd.h>
#include <climits>
#include <cstdlib>
#include <ctime>
#include <cctype>

#include <functional>
#include <algorithm>
#include <numeric>
#include <iterator>

#include <bobcat/a2x>
#include <bobcat/string>
#include <bobcat/fnwrap>
#include <bobcat/mstream>
#include <bobcat/glob>
#include <bobcat/stat>

using namespace std;
using namespace FBB;

inline bool Alternatives::findEntry(HistoryInfo const &history, 
                                    string const &path)
{
    return history.path == path;
}

inline vector<Alternatives::HistoryInfo>::const_iterator 
    Alternatives::findHistory(string const &path) const
{
    return find_if(d_history.begin(), d_history.end(), 
                    FnWrap::unary(findEntry, path));

}

